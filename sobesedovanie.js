
// Что такое замыкание?

/*******************************************************/

// Что такое hoisting?

/*******************************************************/

// Что выведет данный код в консоль?

var x = 10;

function F(){
	this.x = 20;
};

F.prototype.x = 30;

F.prototype.a = function(){ 
	setTimeout(() => console.log('a:', this.x), 0);
};

F.prototype.b = function(){ 
	setTimeout(function(){ console.log('b:', this.x) }, 0);
};

F.prototype.c = function(){ 
	console.log('c:', x);
	var x = 40;
	console.log('c:', x);
};

var o = new F();

o.a();
o.b();
o.c();

/*******************************************************/

var o = {
	a: 1,
	b: 2
}

// Как добавить к объекту "о" новое свойство "с" таким образом, что бы оно не вывелось в консоль в цикле?

for(key in 0){
	console.log(key, ':', o[key]);
}

// Как добавить к объекту "о" новое свойство "d" таким образом, что бы его значение нельзя было изменить?

/*******************************************************/

// Что необходимо добавить в код, что бы в консоль вывелось "true"?

function A(){};
function B(){};

var b = new B();
console.log((b instanceof A));

/*******************************************************/

// ES6 классы, в чем их особенность, в чем отличие от наследования в ES5, что добавлено в ES7

/*******************************************************/

// HTML5 CSS3:
// 1. семантика HTML5, микроформаты
// 2. вендорные селекторы CSS, автопрефиксер, препроцессоры
// 3. CSS mediaquery, адаптивная верстка
// 4. Внедрение шрифтов, инлайн картинки, base64 encoding
// 5. Программная и CSS анимация: js, transition, keyframe
// 6. Программируемая графика в web: Canvas, SVG, WebGL

/*******************************************************/

// DOM level3:
// 1. Возможности браузеров, перечислить технологии
// 2. Рассказать о History API
// 3. Рассказать про Webworkers и Serviceworkers
// 4. Хранение данных на клиенте
// 5. События DOM: всплытие, перехват (capture)

/*******************************************************/

// Рассказать про жизненный цикл React компонент

/*******************************************************/

// Архитектура React + Redux приложения:
// 1. иммутабельность Store
// 2. поток данных в React + Redux

/*******************************************************/

// Что такое REST, методы HTTP, заголовки, статусы, куки

/*******************************************************/

// Рассказать про Websocket, в чем отличие от REST, что общего

/*******************************************************/

// Адресация в сетях, что такое IP адрес, изоляция сетей, фаерволы, безопасность, выделение портов

/*******************************************************/

// Базы данных: 
// 1. RDBMS, NoSQL, особенности, отличия
// 2. Нормализация RDBMS, сложные запросы, профилирование
// 3. Денормализация NoSQL, аггрегация, профилирование
// 4. Memory DB, кеширование данных, pub/sub, очереди